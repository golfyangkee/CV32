<< 투영변환  :  k_perspectiveTransform.py >>

투영변환  :  3D 객체에서  2D 표면에 표현할 대상을 변환할 때 사용 (직선 투영, 원근 투영_ 카메라 렌즈에서 이미지 생성)

     - 그래픽 3D 좌표를 2D로 변환할때

     -  카메라에서  3D 재구성할 때    :  (카메라 3D를 2D의 이미지로 투영)  + ovenCV =   재구성
                               = >  로봇공학 , 의료 이미징, 가상, 증강현실,  지리정보 시스템

     - 이미지 스티칭(image stitching): 두 개 이상의 연관된 이미지를 서로 겹치게 하여 하나의 패노라마
                                        이미지나 고해상도 이미지를 생성하는 과정

     [단계]  특징점 추출(Feature Detection) - > 특징점 매칭(Feature Matching)-> 이미지 정렬(Image Alignment)
            ->이미지 병합(Image Blending)

    - AR  : 가상객체를 실제 객체로 놓을 때
    - 기하학 교정  :  이미지 왜곡 제거하거나 특정 투영을 이용해서 이미지 교정할 때
    - 함수
       :   matrix(3x3 투영 변환 행렬) = cv2.getPerspectiveTransform(src, dst) - 지정
           src: 원본 이미지의 네 점을 나타내는 2D numpy 배열. 일반적으로 np.float32 데이터 타입이며, 크기는 (4, 2)
           dst: 출력 이미지에서 원본 이미지의 네 점이 이동할 좌표를 나타내는 2D numpy 배열

       : res= cv2.warpPerspective(src, matrix, (300, 300)) - 실행
         res : 투영 변환이 적용된 이미지를 반환
==============================================================
<< 임계값 처리  : l_thresh.py >>
 : 이미지 처리중에 가장 많이 사용하는 처리방식
   0~ 255 중에서 127의 값을 깃점으로 127보다 작은 모두 0, 127보다 크면 255로 처리를 하게 된다.

★★★★★★★★ 암기 ★★★★★★★★
감마는 전체
임계값은 특정 범위
이미지를 2진화 분류하는 작업 : 흰색과 검정으로 분류
        cv.threshold(대상이미지, 임계값, 임계값 보다 큰값,  적용타입)   : 임계값 적용해서 대비 조정
        cv.threshold(src, thresh, maxval,  type)
            type의 속성값들
            cv.THRESH_BINARY  : 픽셀값   IMG(X,Y)  thresh 값보다 크면  value,  작으면   0  (이미지는 흰색 or 검은색 픽셀만 포함)
            cv.THRESH_BINARY_INV: 픽셀값   IMG(X,Y)  thresh 값보다 크면  0,  작으면   value (binary의 반전; 임계값 이하는 최대값으로)


            cv.THRESH_TRUNC :  픽셀값 IMG(X,Y) thresh 값보다 크면 thresh,  작으면  픽셀값 IMG(X,Y) (임계값 이하는 원래값 유지)
                    - 영상이 너무 밝아서 밝은 부분을 줄이고 싶을 때 사용 =평탄화 작업


            cv.THRESH_TOZERO : 픽셀값 IMG(X,Y) thresh 값보다 크면 픽셀값 IMG(X,Y)  , 작으면 0으로 채움
                    -> 임계값 이하는 0으로 채운다. = 특징 강조할 때 많이 쓴다. = 낮은 강도가 배경의 노이즈를 제거 (reduce 먼저 하고도 안되면)
                    -> 강사가 인물 사진을 찍을 때 뒤에 배경 노이즈는 제거해서 인물을 강조시킨다.
            cv.THRESH_TOZERO_INV :  픽셀값   IMG(X,Y)  thresh 값보다 크면 0  , 작으면  픽셀값 IMG(X,Y)
                    -> 임계값은 그래도 두고 임계값보다 크면(밝은 값은) 제거하는 목적

===============================================
<<  cv2에서 문서 , 이미지 대비 처리 또는 투영 변화가 되는 함수>>
 1. cvtColor() : 색공간 변화 함수

 2. GaussinanBlur() :  가우시안블러를 사용해서 노이즈(잡음)를 줄인다.

 3. threshold() : 임계값을 사용한  대비   ->  노이즈가 적고  객체와 배경의 명암 차이가 뚜렷할 때 사용 한다.
                                          ->객체 겹칩이 적고  객체의 개수가 많지 않을 경우 사용

 4. findCountours() :윤곽선을 찾아서 명함 또는 문서(대상)의 테두리를 감지 한다.
 5. warpPerspective () , getPerspectiveTransform () :  사각형 테두리 보정할 때 사용
 6. createCLAHE() : 히스토그램이미지(equalizeHist()) 대비개선을 구현했을 때를 대비
 7. drawCountours() : 윤곽선을 그릴때 사용

=====================================================================
<< 감마와임계값.jpg 설명 >>
임계값 처리 : 어디에서 어디까지만 경계를 주겠다, 이미지를 가지고 와서 빨간색이면 255인데 200이상만 되어도 경계 빨간색으로 인지하겠다.
감마보정 : 듀얼모니터 쓸 때 사용한다.

<< 이미지프로세싱 설명 >>
처리방법이 3가지
점 기반, 이웃 기반, 변환처리
기존에 있던거는 괄호 안에 매개인자 파람값을 생각해보면 읽고 쓰고 색변환, 채널분리 등 조건을 주지 않았는데
여기서 부터는 괄호 안에 매개인자에 조건이 들어간다.
조건이 들어가는 애들을 점, 이웃, 변환 이렇게 나눈다.
조건 연산의 함수들에 감마와 임계값이 들어간다.
각 처리 방법 별 함수 잘 보자.

===========================================================================================
240214 (수) 오전 9시 45분
g_reduce.py

reduce() : 이미지 차원 축소 _ 그레이 스케일 대상 (8비트 하나만 가지고 온다 xy채널에서 색상을 뺀 8비트 색상 정보 없이) = 밝기 정보만 추출 = 밝기 채널 하나
 * 그래프에서 높은 부분은 해당 행에 밝은 픽셀이 많이 [집중]되었다. (특정영역의 밝기 변화를 확인)
 ** 과적합의 경우 이미지를 그래프로 가지고 오거나 차원축소로 가지고 오거나 하는데 일반 x값은 이미지만큼 x가 많지 않기 때문에 차원을 축소를 한 다음에
 밝기로 과적합 확인하고 있다.

----- 이미지 차원 축소를 하는 이유? (머신러닝 때 차원 축소를 왜 했을까?) : 리샘플링, 피라미드 축소, 주성분 분석(PCA) 등
1. 계산 효율성 : 이미지 해상도가 줄면 계산해야할 픽셀수가 감소된다.
2. 메모리 사용량 감소
3. 노이즈 감소 후 일반화 : 노이즈가 감소되면 중요한 특징이 강조된다. -> 과적합 방지 도움 (중요한 패턴을 더 쉽게 학습할 수 있으니 -> 오버핏팅이 방지)
4. 특징 추출 표현 간소화 -> 특징 기반 분류, 인식, 검출 알고리즘 성능 향상 (필수 정보를 유지하고 특징을 도드라지게 보여주니까 이미지 특징이 더 간결하다.)
5. 웹, 모바일, 원격 감시 시스템 등 데이터 전송 유리

이미지가 너무 밝으면 분류 작업 시 색상 분포도나 밝기로 분류하기 때문에 배경이 경계로 인식을 해서 분류를 한다.
나중에 딥러닝을 가지고 와도 정확률이 34% 밖에 안해요 이러면
르넷 가지고 와서 해도 이미지 프로세싱이 안되어서 그런데
머신러닝을 돌려서 이미지 돌리면 집이냐 산이냐 바다냐 구분을 해줘야 하는데
특정 영역이 밝거나 이미지 색상 분포도 고르지 않아서 판단하기 모호해서 그렇다.
사람을 점수로 판단을 해도 3등 기준이 뭐야 평균 점수로 이런식으로 근거 기준이 있는데
반 평균은 얼마야 하고 지표가 있는데
이미지도 같다.
밝기가 원활해야 하고 밝기가 0~100까지 동일해야 평가가 좋고 분류 작업도 잘 되고 특징 추출도 잘 된다.
앞에서 프로세싱을 여러번 여러 형태로 해야한다.

===========================================================================

sort()는 모니터링 하는? 애들이다.