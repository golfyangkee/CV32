<<python OpenCV  패키지 >>
pip install setuptools       ->python ver.12
pip install opencv-python     -> 기본 라이브러리  + numpy (배열변환)
pip install opencv-contrib-python  -> 확장, 추가모듈 라이브러리

<<영상이란? >>
Computer Vision  :  컴퓨터를 이용하여 인간의 시각 기능을 수행하는 시스템을 만드는 기술

Image Processing : 컴퓨터 비전과 같이 자동화된 시스템에서 영상의 인식에 적합하도록 영상을 변형하는 처리의 과정

Digital image : 특정 시간에 공간적 연속성 있는 장면에서 샘플링(sampling)을 통해 측정한 값들로 구성되어 있는 점(point)들의 배열
                 (양자화)

픽셀 (pixel)  :  Picture Element, 점, 화소, 디지털 영상을 구성하는 기본적인 영상의 원소 (rgb = bgr) (x,y,채널)



cv::imread (const String &filename, int flags=IMREAD_COLOR)
int flags= 칼라냐 색계냐 등으로 rgb, rgb알파, 색조계, HSV, 흑백 이런식으로 속성값
cv::imwrite (const String &filename, InputArray img, const std::vector< int > &params=std::vector< int >())
파일이름, 어레이객체로, 펙터의파람즈가 있는데 이 속성값이 이미지의 영상프로세싱이 4가지 파트에 있는 거로
이미지 파일만 정리하면 된다.
읽거나 쓸 때 뭘 기준으로 하냐
저 이미지 2가지로 한다.
회색조영상 : 프로세싱
이진영상 : 고수준프로세싱, 분할작업 (ML or DL)
인덱스영상 : 임계값 구현할 때 사용

해상도 이미지 설명
깊이가 비트수(색 깊이) 의미
비트도 임계값이 있어서 잘 맞춰지면 해상도가 굉장히 좋아진다. 높다고 다 좋은게 아니다.
픽셀수랑 비트를 조절해서 해상도를 높인다.

Mat = C++의 객체 (24.02.08 오전 11시 38분쯤 머라 말해줌)
In the case of color images, the decoded images will have the channels stored in B G R order.
When using IMREAD_GRAYSCALE, the codec's internal grayscale conversion will be used, if available.
Results may differ to the output of cvtColor()

imwrite랑 imread의 플래그는 쓸 때는 압축, 확장자를 지정하고 읽을 때는 영상 프로세싱의 4개의 섹션이랑 해상도의 옵션에 따라서 읽어옴
영상 프로세싱의 4개의 섹션이랑 해상도의 옵션을 기점으로 read하고 write의 객체에 속성값을 만들어서 상수로 제공해주고 있다.

CV.png 그림 설명
필터링 및 엣지 검출 부터 이진화 작업하여 바이너리 타입으로 심화 들어감, 저수준, 고수준, 주파수
기본 이미지 처리 에서 색 공간과 변환이 가장 어려운 부분이다.
core module은 기본이미지처리, 색공간과 변환, 이미지 조작이다.

저수준 프로세싱
core. Core functionality
imgproc. Image Processing
imgcodecs. Image file reading and writing
videoio. Video I/O - 13일이나 14일 진행

class   cv::DMatch
class  	cv::Formatter
class  	cv::KeyPoint
----> 명시호출
class  	cv::Mat -- > numpy
https://docs.opencv.org/4.9.0/d3/d63/classcv_1_1Mat.html
눈도장 찍고 뒤로

class  	cv::DataType< _Tp >  -> 볼거
https://docs.opencv.org/4.9.0/d0/d3a/classcv_1_1DataType.html
수치형 데이터 타입
밑에 포인트라고 있는데 x, y 좌표를 가지고 있다.
파이썬 모듈 = c++ 탬플릿
탬플릿은 밑에
나열이 된 것을 상수처럼 호출한다.

class  	cv::Point_< _Tp >
class  	cv::Range
class  	cv::Rect_< _Tp >
----> 나중에 함수로 쓸 것들

Operations on arrays
배열 연산 함수들 - 이미지 밝기 어둡기 대조대비
cv::sum (InputArray src)

비트연산자들 - 이진화 애들은 마스크기법, 커널기법

<< 영상 종류 >> - 영상종류와특징.jpg, 해상도.png 보기
A. 컬러 영상 (Color image, RGB image)
    1) 일반적으로 1픽셀은 RGB(Red, Green, Blue)의 3개 채널로 구성
    2) 각 채널에 8비트를 할당
    3) 1개 픽셀은 0 ~ 224-1의 총 16,777,216개 색상값 또는 밝기값
    4) 가로(1920)x세로(1080)x깊이(3채널x8비트)
    5) Full HD : 1920x1080x3x8 = 49,766,400 bits = 6,220,800 bytes (약 6MBytes) (/8)

B. 회색조 영상 (Grayscale image)
    1) 1픽셀은 밝기값을 의미하는 1개 채널로 구성되며 8비트를 할당
    2) 1개 픽셀은 - 2^0 ~ 2^8-1의 총 256개 밝기값
    3) 가로(1920)x세로(1080)x깊이(8비트)
    4) FullHD : 1920x1080x8 = 16,588,800 bits = 2,073,600 bytes (약 2MBytes)

C. 이진 영상 (Binary image)
    1) 1픽셀은 밝기값을 의미하는 1개 채널로 구성되며 2비트(0,1)를 할당
    2) 1개 픽셀은 – 0과 1의 총 2개 밝기값
    3) 가로(1920)x세로(1080)x깊이(1비트)
    4) Full HD : 1920x1080 = 2,073,600 bits = 259,200 bytes

D. 인덱스 영상 (Indexed image)
   1) 1개 픽셀은 RGB 3채널이 아닌 1채널로 구성(1채널에 8비트를 할당)
   2) 일반적으로 적은 수의 비트로 컬러 영상을 표현할 때 활용
   3) 컬러 영상에 비해 인덱스 영상의 화질은 저하되지만 영상 용량도 낮음
   4) 인덱스 값으로, RGB 밝기값을 갖고 있는 색상표(Palette)에서 위치에 대한 인덱스로 활용
   5) 가로(1920)x세로(1080)x깊이(8비트) + RGB(3채널x8비트)x256개
   6) Full HD: 1920x1080x8+3x8x256 = 16,594,944 bits = 2,074,368 bytes(약 2MBytes)

==============================CV의 3대 특징 (분류, 객체 감지 , 이미지세그멘테이션)   ====================
1. OpenCV에서 제공하는 학습모듈  (머신러닝, 딥러닝 ) : Tip cv.readNet(모델, 환경설정) 딥러닝호출
2. OpenCV  +  텐서플로 학습모듈(DL)
3. OpenCV  +  사이킷런(파이선 머신러닝알고리즘 ) + GPT or API(파인튜닝)
====================================================================================================
[공식] https://docs.opencv.org/4.9.0/de/d25/imgproc_color_conversions.html
그레이 스케일 (모든 픽셀이 동일한 색조(회색조) ): 각 색상 채널(블루, 그린, 레드)의 밝기에 가중치를 적용하여 단일 밝기 값으로
        결합 하는 원리로  가중치는 일반적으로 휘도(luminance : 빛의 밝기)를 고려하여 설정된다. 저장공간 절약
        색상 정보를 포함하지 않고 밝기 정보만 있다.
        밝기: 검은색 ~ 흰색 ( 0~255) 8비트
<계산식>
  Gray = 0.299 * Red + 0.587 * Green + 0.114 * Blue
  Gray = 0.299 * 255 + 0.587 * 0 + 0.114 * 0    ≈ 76.2

휘도, 그레이 스케일 변환, Y 계수는 <모두 색상 정보를 밝기 정보로 변환>하는 과정을 말한다.
1)휘도(Luminance):빛의 밝기, 광도 측청치 (빛의 강도와 방향성)
2)Y 계수(Y coefficient):텔레비전과 비디오 시스템에서 사용되는 YUV 색 공간에서 Y 채널을 의미하며 휘도 정보를 나타내고,
       U와 V는 색차 정보를 나타냄, Y 계수는 RGB 값을 휘도 값으로 변환하는 데 사용되는 공식에서 파생된다.
 ========================================================================================================

Operations on arrays : 채널값, 색상의 분포값 을 가지고 계산
    이미지에서 비트연산 (커널, 마스크 할 때 사용) ../exam/d_exam
    AND  : 두 개의 교집합 영역, 특정 영역 추출할 때 사용, -> [두 개의 이미지에서 흰 색인 부분만 추출하거나 남기고 싶을 때 사용]
    OR   : 합집합, -> 모든 영역을 보전하겠다.
    NOT  : 색상 반전할 때 사용
    XOR  : 겹치지 않는 부분을 찾을 대, 두 이미지의 차이를 찾을 때 사용

    산술연산
    +   : 픽셀값을 더한다. -> 이미지 밝기 증가 ADD
    -   : 이미지 밝기 감소 substract
    *   : 픽셀값에 스칼라값을 곱한다. -> 이미지 대비 조절
    /   : 픽셀값에 스칼라값으로 나눈다. -> 이미지 대비 감소

마스킹 작업이란?
마스크(mask)는 이미지 처리 및 컴퓨터 비전에서 사용되는 중요한 개념입니다.
마스크는 이미지의 일부분을 선택하거나 제한하는 데 사용되는 이진 이미지나 배열로, 일반적으로 이미지의 특정 영역을 표시하거나 감추는 데 사용됩니다.


'''
종종 쓸 함수들
cv::absdiff
cv::dft
cv::gemm
cv::dct
'''

'''
void 	cv::hconcat (InputArray src1, InputArray src2, OutputArray dst)
void 	cv::hconcat (InputArrayOfArrays src, OutputArray dst)
void 	cv::vconcat (InputArray src1, InputArray src2, OutputArray dst)
void 	cv::vconcat (InputArrayOfArrays src, OutputArray dst)
'''

'''
주파수 변위 연산자로 계산하면서 쓰는 애들
void 	cv::idct (InputArray src, OutputArray dst, int flags=0)
void 	cv::idft (InputArray src, OutputArray dst, int flags=0, int nonzeroRows=0)
void 	cv::inRange (InputArray src, InputArray lowerb, InputArray upperb, OutputArray dst)
double 	cv::invert (InputArray src, OutputArray dst, int flags=DECOMP_LU)
void 	cv::log (InputArray src, OutputArray dst)
void 	cv::LUT (InputArray src, InputArray lut, OutputArray dst)
void 	cv::magnitude (InputArray x, InputArray y, OutputArray magnitude)
'''


'''
Drawing Functions - 여기있는거는 거의 다 쓴다.
cv::circle (InputOutputArray img, Point center, int radius, const Scalar &color, int thickness=1, int lineType=LINE_8, int shift=0)
cv::ellipse (InputOutputArray img, Point center, Size axes, double angle, double startAngle, double endAngle, const Scalar &color, int thickness=1, int lineType=LINE_8, int shift=0)
'''

'''
Color Space Conversions
읽어왔는데 칼라야 이런거 변경하려고 쓴다.
cv::cvtColor
cvtColor(img, img, COLOR_BGR2Luv);
cv.cvtColor(	src, code[, dst[, dstCn]]	) ->	dst

(Blue, then Green, then Red)

0 to 255 for CV_8U images
0 to 65535 for CV_16U images
0 to 1 for CV_32F images
'''



























